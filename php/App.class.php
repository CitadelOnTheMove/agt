<?php

include_once CLASSES . 'AppSettingsDefinitions.class.php';
include_once CLASSES . 'Util.class.php';

/**
 * This class is to handle the creation and loading of the applications
 * generated by the AGT
 */
class App {
    /*
     * Member variables are public in order 
     * to be serialized properly by json_encode
     */

    public $uid;
    public $name;
    public $description;
    public $userId;
    public $datasetIds;
    public $cityIds;
    public $color;
    public $darkColor;
    public $image;

    /**
     * Creates a new instance of the App object
     * @param string $uid the unique identifier of the app
     * @param string $name the name of the app
     * @param string $description the name of the app
     * @param string $userId the unique identifier of the user
     * @param string $datasetIds the array of dataset Ids for this application
     * @param string $cityIds  the array of city Ids for this application
     * @param string $color the main color of the app
     * @param string $darkColor the secondary color of the app
     * @param string $image the image of the app
     */
    public function __construct($uid, $name, $description, $userId, $datasetIds, $cityIds, $color, $darkColor, $image) {
        $this->uid = $uid;
        $this->name = $name;
        $this->description = $description;
        $this->userId = $userId;
        $this->datasetIds = $datasetIds;
        $this->cityIds = $cityIds;
        $this->color = $color;
        $this->darkColor = $darkColor;
        $this->image = $image;
    }

    /**
     * Fetches an App instance from database based on the dataset id
     * @param array $assocArray an associative array representation of the object
     * @param int $userId the unique identifier of the user
     * @param string $image the image of the App
     * @return App|boolean an App instance or false on failure
     */
    public static function createFromDb($uid) {

        $sql = "SELECT * FROM apps where uid = :uid";
        $sqlParams[":uid"] = $uid;

        try {
            $sth = Database::$dbh->prepare($sql);
            $sth->execute($sqlParams);
            if ($result = $sth->fetch(PDO::FETCH_ASSOC)) {
                $uid = $result['uid'];
                $name = $result['name'];
                $description = $result['description'];
                $userId = $result['userId'];
                $image = $result['image'];
                $datasetIds = array();
                $cityIds = array();

                // App found in database, now we load its settings
                $sql = "SELECT * FROM apps_settings WHERE app_uid = :uid";
                try {
                    $sth = Database::$dbh->prepare($sql);
                    $sth->execute($sqlParams);
                    while ($row = $sth->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT)) {
                        switch ($row["apps_settings_definition_id"]) {
                            case AppSettingsDefinitions::CITY: array_push($cityIds, $row['value']);
                                break;
                            case AppSettingsDefinitions::DATASET: array_push($datasetIds, $row['value']);
                                break;
                            case AppSettingsDefinitions::COLOR: $color = $row['value'];
                                break;
                            case AppSettingsDefinitions::DARKCOLOR: $darkColor = $row['value'];
                                break;
                            default:; //Do nothing
                        }
                    }
                    return new App($uid, $name, $description, $userId, $datasetIds, $cityIds, $color, $darkColor, $image);
                } catch (Exception $e) {
                    if (DEBUG)
                        $sth->debugDumpParams();
                    Util::throwException(__FILE__, __LINE__, __METHOD__, "select app settings failed", $e->getMessage(), $e);
                    return false;
                }
            }
            else {
                return false;
            }
        } catch (Exception $e) {
            if (DEBUG)
                $sth->debugDumpParams();
            Util::throwException(__FILE__, __LINE__, __METHOD__, "select app uid failed", $e->getMessage(), $e);
        }
    }

    /**
     * Factory method that returns a new instance of an App
     * @param array $assocArray an associative array representation of the object
     * @param int $userId the unique identifier of the user
     * @param string $image the image of the App
     * @return App|boolean an App instance or false on failure
     */
    public static function createFromArray($assocArray, $userId, $image) {
        if (!empty($assocArray))
            return new App(null, $assocArray['name'], $assocArray['description'], $userId, $assocArray['datasetIds'], $assocArray['cityIds'], $assocArray['color'], $assocArray['darkColor'], $image);
        return false;
    }

    /**
     * Saves the App instance (AppId, AppName, AppDescription, DatasetIds[], CityIds[], ColorId)
     * to the database
     * @return true on success of false otherwise
     */
    public function save() {

        $this->uid = trim(App::getGUID(), '{}');
        $sql = "INSERT INTO apps VALUES(:uid, :name, :userId, Now(), :description, :image, :isDeleted)";
        $sqlParams = array(':uid' => $this->uid, ':name' => $this->name, ':userId' => $this->userId, ':description' => $this->description, ':image' => $this->image, ':isDeleted' => 0);
        try {
            $sth = Database::$dbh->prepare($sql);
            $sth->execute($sqlParams);
        } catch (Exception $e) {
            if (DEBUG)
                $sth->debugDumpParams();
            Util::throwException(__FILE__, __LINE__, __METHOD__, "insert dataset failed", $e->getMessage(), $e);
            return false;
        }

        foreach ($this->datasetIds as &$datasetId) {
            $sql = "INSERT INTO apps_settings VALUES(null, :uid, :apps_settings_definition_id, :value)";
            $sqlParams = array(':uid' => $this->uid,
                ':apps_settings_definition_id' => AppSettingsDefinitions::DATASET,
                ':value' => $datasetId);
            try {
                $sth = Database::$dbh->prepare($sql);
                $sth->execute($sqlParams);
            } catch (Exception $e) {
                if (DEBUG)
                    $sth->debugDumpParams();
                Util::throwException(__FILE__, __LINE__, __METHOD__, "insert dataset failed", $e->getMessage(), $e);
                return false;
            }
        }

        foreach ($this->cityIds as &$cityId) {
            $sql = "INSERT INTO apps_settings VALUES(null, :uid, :apps_settings_definition_id, :value)";
            $sqlParams = array(':uid' => $this->uid,
                ':apps_settings_definition_id' => AppSettingsDefinitions::CITY,
                ':value' => $cityId);
            try {
                $sth = Database::$dbh->prepare($sql);
                $sth->execute($sqlParams);
            } catch (Exception $e) {
                if (DEBUG)
                    $sth->debugDumpParams();
                Util::throwException(__FILE__, __LINE__, __METHOD__, "insert city failed", $e->getMessage(), $e);
                return false;
            }
        }

        $sql = "INSERT INTO apps_settings VALUES(null, :uid, :apps_settings_definition_id, :value)";
        $sqlParams = array(':uid' => $this->uid,
            ':apps_settings_definition_id' => AppSettingsDefinitions::COLOR,
            ':value' => $this->color);
        try {
            $sth = Database::$dbh->prepare($sql);
            $sth->execute($sqlParams);
        } catch (Exception $e) {
            if (DEBUG)
                $sth->debugDumpParams();
            Util::throwException(__FILE__, __LINE__, __METHOD__, "insert color failed", $e->getMessage(), $e);
            return false;
        }

        $sql = "INSERT INTO apps_settings VALUES(null, :uid, :apps_settings_definition_id, :value)";
        $sqlParams = array(':uid' => $this->uid,
            ':apps_settings_definition_id' => AppSettingsDefinitions::DARKCOLOR,
            ':value' => $this->darkColor);
        try {
            $sth = Database::$dbh->prepare($sql);
            $sth->execute($sqlParams);
        } catch (Exception $e) {
            if (DEBUG)
                $sth->debugDumpParams();
            Util::throwException(__FILE__, __LINE__, __METHOD__, "insert dark color  failed", $e->getMessage(), $e);
            return false;
        }

        return true;
    }

    /* Generate GUID in every environment */
    public static function getGUID() {
        if (function_exists('com_create_guid')) {
            return com_create_guid(); /* windows */
        } else {
            mt_srand((double) microtime() * 10000); //optional for php 4.2.0 and up.
            $charid = strtoupper(md5(uniqid(rand(), true)));
            $hyphen = chr(45); // "-"
            $uuid = chr(123)// "{"
                    . substr($charid, 0, 8) . $hyphen
                    . substr($charid, 8, 4) . $hyphen
                    . substr($charid, 12, 4) . $hyphen
                    . substr($charid, 16, 4) . $hyphen
                    . substr($charid, 20, 12)
                    . chr(125); // "}"
            return $uuid;
        }
    }

}

?>